##Input Element
Rev 3 (For revision history click [here](https://github.com/ThunderID/ThunderComponents/blob/master/Contracts/Backend/log-inputs.mdown))

###Element-type
This will be set of options of your 'element-type' you can choose  to generate your UI.

####1. input-string
Description : this will generate input with string type 

Data : string value (passed via parameter->value)

Parameter : 

	name : input name [string value, use snake case format],
	value : input value [string value],
	validation : array of validation. ie : ['required' => true, 'min' => 1, 'max' => 10]

[Snake Case Format](https://en.wikipedia.org/wiki/Snake_case)

How to Use :

	'element-class'      => 'input',
	'element-type'       => 'string',
	'element-properties' =>  [
		'name'       => element name,
		'value'      => value passed to element,
		'validation' => array of validation ie : ['required' => true]
	]

####2. input-email
Description : this will generate input with string type 

Data : string value (passed via parameter->value)

Parameter : 

	name : input name [string value, use snake case format],
	value : input value [string value],
	validation : array of validation. ie : ['required' => true, 'min' => 1, 'max' => 10]

[Snake Case Format](https://en.wikipedia.org/wiki/Snake_case)

How to Use :

	'element-class'      => 'input',
	'element-type'       => 'email',
	'element-properties' =>  [
		'name'       => element name,
		'value'      => value passed to element,
		'validation' => array of validation ie : ['required' => true]
	]

####3. input-hidden
Description : this will generate input hidden type (will not show in UI)

Data : string value (passed via parameter->value)

Parameter : 

	name : input name [string value, use snake case format],
	value : input value [string value],
	validation : NULL (will not validate anything)

[Snake Case Format](https://en.wikipedia.org/wiki/Snake_case)

How to Use :

	'element-class'      => 'input',
	'element-type'       => 'email',
	'element-properties' =>  [
		'name'       => element name,
		'value'      => value passed to element,
		'validation' => null
	]
	
####4. input-disabled
Description : this will generate input with disabled style

Data : string value (passed via parameter->value)

Parameter : 

	name : input name [string value, use snake case format],
	value : input value [string value],
	validation : NULL (will not validate anything)

[Snake Case Format](https://en.wikipedia.org/wiki/Snake_case)

How to Use :

	'element-class'      => 'input',
	'element-type'       => 'email',
	'element-properties' =>  [
		'name'       => element name,
		'value'      => value passed to element,
		'validation' => null
	]

####5. input-password
Description : this will generate input with password format

Data : None (password will not displayed)

Parameter : 

	name : input name [string value, use snake case format],
	value : NULL
	validation : array of validation. ie : ['required' => true, 'min' => 1, 'max' => 10]

[Snake Case Format](https://en.wikipedia.org/wiki/Snake_case)

How to Use :

	'element-class'      => 'input',
	'element-type'       => 'password',
	'element-properties' =>  [
		'name'       => element name,
		'value'      => null,
		'validation' => array of validation ie : ['required' => true]
	]

####6. input-number
Description : this will generate input with number format

Data : number format

Parameter : 

	name : input name [string value, use snake case format],
	value : input value [string value],
	validation : array of validation. ie : ['required' => true, 'min' => 1, 'max' => 10]

[Snake Case Format](https://en.wikipedia.org/wiki/Snake_case)

How to Use :

	'element-class'      => 'input',
	'element-type'       => 'password',
	'element-properties' =>  [
		'name'       => element name,
		'value'      => value passed to element,
		'validation' => array of validation ie : ['required' => true]
	]

####7. input-text
Description : This will generate input with textarea format

Data : Data on text format. Can be normal String text, or mark up (HTML)

Parameter : 

	name : input name [string value, use snake case format],
	value : input value [string value],
	validation : array of validation. ie : ['required' => true, 'min' => 1, 'max' => 10]

[Snake Case Format](https://en.wikipedia.org/wiki/Snake_case)

How to Use :

	'element-class'      => 'input',
	'element-type'       => 'text',
	'element-properties' =>  [
		'name'       => element name,
		'value'      => value passed to element,
		'validation' => array of validation ie : ['required' => true]
	]
	
####8. input-datetime
Description : input for datetime

Data : date(YMD HIS for datetime, YMD for date, HIS for time) in specified format (GMT)

Parameter Backend : 

	name : input name [string value],
	value : input value [string value],
	validation : array of validation. ie : ['required' => true, 'min' => 1, 'max' => 10],
	format : date, time, datetime,
	timezone : string timezone value
	timezone_type : string type of timezone

Output Format UI : Date time value formatted (calculated by Timezone set by API)

Validation UI : 

auto validate input on text typed and focus event. if validation returning false, input will set class "danger". Else, it will set class="success". You can override css by set danger/success class on your global css.	
