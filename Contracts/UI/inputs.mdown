###Inputs
Revision 2 (For revision history click [here](https://github.com/ThunderID/ThunderComponents/blob/master/Contracts/UI/log-inputs.mdown))

####1. input-string
Description : input with string type 

Data Backend : string value

Output Format UI : none

Validation UI (soon) : 

auto validate input on text typed and focus event. if validation returning false, input will set class "danger". Else, it will set class="success". You can override css by set danger/success class on your global css.

Parameter UI : 

	label : input label
	placeholder : input placeholder text
	class : input class styling (ie: if using bootstrap use 'form-control' class) or class for behavior (ie: using pre-defined select2 class, etc)
	default : set this component to it's original styling or behavior. Once you try to override component style/behavior this value must be sets to false.

Notes :
	Set null if you dont want override things.

####2. input-datetime
Description : input for datetime

Data Backend : date(YMD HIS) in specified format (GMT)

Parameter Backend : 

	name : input name [string value],
	value : input value [string value],
	validation : array of validation. ie : ['required' => true, 'min' => 1, 'max' => 10],
	type : (date, time, datetime),
	GMT : integer number(-7,0,7), assign with null will dissable GMT conversion

Output Format UI : Date time value formatted (calculated by GMT set by API)

Validation UI : 

auto validate input on text typed and focus event. if validation returning false, input will set class "danger". Else, it will set class="success". You can override css by set danger/success class on your global css.

Parameter UI : 

	label : input label
	placeholder : input placeholder text
	class : input class styling (ie: if using bootstrap use 'form-control' class)
	
####3. input-dateTimeRange
Description : input for date time using date time range

Data Backend : date(HIS) in specified format (GMT)

Parameter Backend : 

	name : input name [string value],
	value : input value [string value],
	validation : array of validation. ie : ['required' => true, 'min' => 1, 'max' => 10],
	Range : ['start' => date time start, 'end' => date time end]	
	type : (date, time, datetime),
	GMT : integer number(-7,0,7), assign with null will dissable GMT conversion

Output Format UI : Date time value formatted (calculated by GMT set by API)

Validation UI : 

auto validate input on text typed and focus event. if validation returning false, input will set class "danger". Else, it will set class="success". You can override css by set danger/success class on your global css.

Parameter UI : 

	label : input label
	placeholder : input placeholder text
	class : input class styling (ie: if using bootstrap use 'form-control' class)

####4. input-email
Description : input with email type 

Data backend : data email

Parameter backend :

	name : input name [string value]
	value : input value [string value]
	validation : array of validation. ie : ['required' => true, 'min' => 1, 'max' => 10]

Output Format UI : none

Validation UI : 

auto validate input on text typed and focus event. if validation returning false, input will set class "danger". Else, it will set class="success". You can override css by set danger/success class on your golbal css.

Parameter UI : 

	label : input label
	placeholder : input placeholder text
	class : input class styling (ie: if using bootstrap use 'form-control' class)
	
####5. input-password
Description : input with password type.

Data backend : data password

Parameter backend : 

	name : input name [string value]
	value : input value [string value]. This component wont show password to UI. You can leave it as null or it will be just fine too if you dont. We wont assign retrieved password to UI.
	validation : array of validation. ie : ['required' => true, 'min' => 1, 'max' => 10]

Output Format UI : masked by asterick (*) char. Will not show any given data by backend.

Validation UI : 

auto validate input on text typed and focus event. if validation returning false, input will set class "danger". Else, it will set class="success". You can override css by set danger/success class on your golbal css.

Parameter UI : 

	label : input label
	placeholder : input placeholder text
	class : input class styling (ie: if using bootstrap use 'form-control' class)
	
####6. input-number
Description : input with number type 

Data backend : data with integer type

Parameter backend :

	name : input name [string value]
	value : input value [string value]
	validation : array of validation. ie : ['required' => true, 'min' => 1, 'max' => 10]

Output Format UI : none

Validation UI : 

auto validate input on text typed and focus event. if validation returning false, input will set class "danger". Else, it will set class="success". You can override css by set danger/success class on your golbal css.

Parameter UI : 

	label : input label
	placeholder : input placeholder text
	class : input class styling (ie: if using bootstrap use 'form-control' class)
	
####7. input-text
Description : input with textarea 

Data backend : data on text format. Can be normal String text, or mark up (HTML)

Parameter Backend : 

	name : input name [string value]
	value : input value [string value]
	validation : array of validation. ie : ['required' => true]	

Output Format UI : none

Validation UI : 

auto validate input on text typed and focus event. if validation returning false, input will set class "danger". Else, it will set class="success". You can override css by set danger/success class on your golbal css.

Parameter UI : 

	label : input label
	placeholder : input placeholder text
	class : input class styling (ie: if using bootstrap use 'form-control' class or if you're using text editor like summer note you can add "summer-note" class here)
	
####8. input-multiSelect
Description : input with multiple value (checkbox)

Data backend: array of selected data. Data format : ['id' => 'value'] | example : ['1' => 'red', '2' => 'Green']

Parameter backend : 

	name : input name [string value]
	value : array of input value. Format : ['id' => 'value']
	validation : array of validation. ie : ['required' => true]
	list : array data for select

Output Format UI : convert id to selected value

Validation UI : 

auto validate input on click, select change, and focus event. if validation returning false, input will set class "danger". Else, it will set class="success". You can override css by set danger/success class on your golbal css.

Parameter UI : 

	label : input label
	placeholder : input placeholder text
	class : input class styling (ie: if using bootstrap use 'form-control' class)
	
####9. input-singleSelect
Description : input with only single account can be selected

Data backend : ID of selected data. example: list = ['1'=> 'red', '2' => 'blue'] and the selected data is 'blue', just pass '2' (ID) and you're done.

Parameter backend: 

	name : input name [string value]
	value : id of selected data
	validation : array of validation. ie : ['required' => true, 'min' => 1, 'max' => 10]
	list : array data for select	
	option : radio or dropdown

Output Format UI : convert id to selected data

Validation UI : 

auto validate input on text typed and focus event. if validation returning false, input will set class "danger". Else, it will set class="success". You can override css by set danger/success class on your golbal css.

Parameter UI : 

	label : input label
	placeholder : input placeholder text
	class : input class styling (ie: if using bootstrap use 'form-control' class)
	type : you can choose dropdown styled or radiobutton styled. format : 'dropdown' for dropdown, 'radio' for radiobutton 

####10. input-tag
Description : input with tag format

Data backend : Array of selected data ['selected-id' => 'selected value']

Parameter backend : 

	name : input name [string value]
	value : array of selected data. Multiple or Single data must be formatted in array format.  	
	validation : array of validation. ie : ['required' => true, 'min' => 1, 'max' => 10]

Output Format UI : convert id to selected value

Validation UI : 

auto validate input on text typed and focus event. if validation returning false, input will set class "danger". Else, it will set class="success". You can override css by set danger/success class on your golbal css.

Parameter UI : 

	label : input label
	placeholder : input placeholder text
	class : input class styling (ie: if using bootstrap use 'form-control' class)
	
####11. input-money
Description : input with idr money format

Data backend: integer data

Parameter backend: 

	name : input name [string value]
	value : input value [string value]t [boolean value]	
	validation : array of validation. ie : ['required' => true, 'min' => 1, 'max' => 10]
	currency : currency format. format ['separator-type' : can be . or , or whatever. 'separator-count' : digit length will be separated, 'symbol' : symbol of currency ie: $, IDR, etc]

Output Format UI : format integer data matching the currency format

Validation UI : 

auto validate input on text typed and focus event. if validation returning false, input will set class "danger". Else, it will set class="success". You can override css by set danger/success class on your golbal css.

Parameter UI : 

	label : 
	placeholder : input placeholder text
	class : input class styling (ie: if using bootstrap use 'form-control' class)
	symbol-location : two options 'prefix' -> in front of number, or 'postfix' -> after the number
